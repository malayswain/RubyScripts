=begin
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
=end
require "rubygems"
require "pry"
class TriangularNumber
  def self.fetch_upto(n, cached_num=0, final_num=0)
    if cached_num == 0 || final_num ==0
      sum = 0
      (1..n).each { |n| sum += n }
      return sum
    else
      return cached_num + final_num
    end
  end
end

class Fixnum

  def factors
    factors = Array.new
    1.upto(self) do |i|
      factors << i if self%i == 0
    end
    return factors
  end

  def numberOfDivisors
    nod = 0
    sqrt = Math.sqrt(self).to_i
    for i in 1..sqrt
      nod += 2 if self % i == 0
    end
    #Correction if the number is a perfect square
    nod -= 1 if (sqrt * sqrt == self)
    return nod;
  end
end

# GitHUb Solun

def divisors_count(num)
  count = 0
  latest_divisor = 1
  smallest_divisor = num
  puts "C: #{count}, N: , #{num}, L :#{latest_divisor}, S: #{smallest_divisor}"
  while (latest_divisor < smallest_divisor)
    if num % latest_divisor == 0
      smallest_divisor = num / latest_divisor
      if (latest_divisor == smallest_divisor)
        count += 1
      else
        count += 2
      end
    end
    latest_divisor += 1
    puts "C: #{count}, N: , #{num}, L :#{latest_divisor}, S: #{smallest_divisor}"
  end
  count
end


print divisors_count(45)
print 45.factors
# triange_number = 0
# i = 1
# stop = false
# while !stop
#   triange_number = i + triange_number
#   puts triange_number
#   if (divisors_count(triange_number) <= 500)
#     i += 1
#   else
#     stop = true
#   end
# end
# p triange_number


#
# count = 2
# loop do
#   triangular_number = TriangularNumber.fetch_upto(triangular_number || count , triangular_number || 0, count || 0 )
#   factors = triangular_number.factors
#   puts "Number - #{triangular_number} with Factors #{factors.length} "
#   if triangular_number.numberOfDivisors > 500
#    print " Found Traingular Number : #{triangular_number}, Factors : #{factors.length}"
#    break
#   end
#   count += 1
# end
